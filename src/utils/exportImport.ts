import { EncryptionService } from './encryption';
import type { AppData } from '@/types/todo';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
 */
export class ExportImportService {
  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
   * @param data - –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
   * @param password - –ü–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
   * @throws Error –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º –ø–∞—Ä–æ–ª–µ –∏–ª–∏ –æ—à–∏–±–∫–∞—Ö —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  static async exportData(data: AppData, password: string): Promise<void> {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
    if (!EncryptionService.validatePassword(password)) {
      throw new Error('–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.');
    }

    try {
      const encryptedData = EncryptionService.encrypt(data, password);
      
      // –°–æ–∑–¥–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const blob = new Blob([encryptedData], { type: 'application/octet-stream' });
      const url = URL.createObjectURL(blob);
      
      // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const a = document.createElement('a');
      a.href = url;
      a.download = `todo-backup-${new Date().toISOString().split('T')[0]}.encrypted`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º URL –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
      URL.revokeObjectURL(url);
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
   * @param file - –§–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è
   * @returns –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
   */
  private static async readFileAsText(file: File): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
      reader.readAsText(file);
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–º–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   * @param data - –ü—Ä–∏—à–µ–¥—à–∏–µ –¥–∞–Ω–Ω—ã–µ
   * @returns –ë—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
   */
  static validateImportedData(data: AppData) {
    return data && Array.isArray(data.projects) && 
      (!data.filters || typeof data.filters === 'object');
  }

  /**
   * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   * @param file - –§–∞–π–ª —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   * @param password - –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
   * @returns –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @throws Error –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø–∞—Ä–æ–ª–µ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
   */
  static async importData(file: File, password: string): Promise<object> {
    try {
      const encryptedData = await this.readFileAsText(file);
      console.log('üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', encryptedData.substring(0, 100) + '...');
      
      // –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const decryptedData = EncryptionService.decrypt(encryptedData, password);
      if (!this.validateImportedData(decryptedData)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
      }
      console.log('üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', typeof decryptedData, decryptedData);
      
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', {
        hasProjects: Array.isArray(decryptedData.projects),
        projectsCount: decryptedData.projects?.length,
        version: decryptedData.version,
        keys: Object.keys(decryptedData)
      });
      
      return decryptedData;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      if (error instanceof Error) {
        if (error.message.includes('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')) {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
        }
        if (error.message.includes('JSON')) {
          throw new Error('–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
        }
      }
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  }
}