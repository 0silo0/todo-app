import { ref, type VNode, type Component } from 'vue';

export type ModalType = 'info' | 'success' | 'warning' | 'error' | 'confirm';
export type ModalSize = 'sm' | 'md' | 'lg' | 'xl';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ VNode
*/
export interface ModalContent {
  type: 'text' | 'component' | 'vnode';
  content?: string; // –¥–ª—è —Ç–µ–∫—Å—Ç–∞
  component?: Component; // –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  vnode?: VNode; // –¥–ª—è VNode
  props?: Record<string, any>; // –ø—Ä–æ–ø—Å—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
}

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
*/
export interface ModalOptions {
  title?: string;
  content?: ModalContent; // –î–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  message?: string;       // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  icon?: string;
  type?: ModalType;
  size?: ModalSize;
  confirmText?: string;
  cancelText?: string;
  showConfirm?: boolean;
  showCancel?: boolean;
  closable?: boolean;
  persistent?: boolean;   // –ó–∞–ø—Ä–µ—â–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
  maxWidth?: string;
}

/**
 * –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
*/
interface ModalState extends ModalOptions {
  show: boolean;
  loading: boolean;
}

/**
 * –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–∏–±–∫—É—é —Å–∏—Å—Ç–µ–º—É –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–º–∏—Å–æ–≤
*/
export const useModal = () => {
  // –†–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const modalState = ref<ModalState>({
    show: false,
    loading: false,
    title: '',
    message: '',
    icon: '',
    type: 'info',
    size: 'md',
    confirmText: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
    cancelText: '–û—Ç–º–µ–Ω–∞',
    showConfirm: true,
    showCancel: true,
    closable: true,
    persistent: false,
    maxWidth: 'none'
  });

  // –ö–æ–ª–±—ç–∫ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–º–∏—Å–∞
  let resolvePromise: ((value: boolean) => void) | null = null;

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
   * @param options - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
   * @returns Promise, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
  */
  const showModal = (options: ModalOptions = {}): Promise<boolean> => {
    console.log('üîÑ showModal –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', options);

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–º–∏—Å –µ—Å–ª–∏ –µ—Å—Ç—å
    if (resolvePromise) {
      resolvePromise(false);
      resolvePromise = null;
    }

    console.log('dfsa fds ', options.message)

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    const content = options.content || (options.message ? {
      type: 'text',
      content: options.message
    } : undefined);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modalState.value = {
      show: true,
      loading: false,
      title: options.title || '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
      content,
      message: options.message || '',
      icon: options.icon || '',
      type: options.type || 'info',
      size: options.size || 'md',
      confirmText: options.confirmText || '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
      cancelText: options.cancelText || '–û—Ç–º–µ–Ω–∞',
      showConfirm: options.showConfirm !== false,
      showCancel: options.showCancel !== false,
      closable: options.closable !== false,
      persistent: options.persistent || false,
      maxWidth: options.maxWidth || 'none'
    };

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    return new Promise((resolve) => {
      resolvePromise = resolve;
    });
  };

  const confirm = () => {
    if (resolvePromise) {
      resolvePromise(true);
      resolvePromise = null;
    }
    modalState.value.show = false;
  };

  const cancel = () => {
    if (resolvePromise) {
      resolvePromise(false);
      resolvePromise = null;
    }
    modalState.value.show = false;
  };

  const close = () => {
    if (resolvePromise) {
      resolvePromise(false);
      resolvePromise = null;
    }
    modalState.value.show = false;
  };

  const setLoading = (loading: boolean) => {
    modalState.value.loading = loading;
  };

  const confirmAction = (message: string, title: string = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ') => {
    console.log(message, title)
    return showModal({
      title,
      message,
      type: 'confirm',
      icon: '‚ö†Ô∏è'
    });
  };

  const showInfo = (message: string, title: string = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') => {
    return showModal({
      title,
      message,
      type: 'info',
      icon: '‚ÑπÔ∏è'
    });
  };

  const showSuccess = (message: string, title: string = '–£—Å–ø–µ—Ö') => {
    return showModal({
      title,
      message,
      type: 'success',
      icon: '‚úÖ'
    });
  };

  const showError = (message: string, title: string = '–û—à–∏–±–∫–∞') => {
    return showModal({
      title,
      message,
      type: 'error',
      icon: '‚ùå'
    });
  };

  const showWarning = (message: string, title: string = '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ') => {
    return showModal({
      title,
      message,
      type: 'warning',
      icon: '‚ö†Ô∏è'
    });
  };

  return {
    modalState,
    showModal,
    confirm,
    cancel,
    close,
    setLoading,
    confirmAction,
    showInfo,
    showSuccess,
    showError,
    showWarning
  };
};