import { ref } from 'vue';
import { ExportImportService } from '@/utils/exportImport';
import { EncryptionService } from '@/utils/encryption';
import type { AppData } from '@/types/todo';
import { useTodos } from './useTodos';
import { useModal } from './useModal';

/**
 * –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–æ–º –∏ –∏–º–ø–æ—Ä—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
*/
export const useExportImport = () => {
  const { appData, replaceData } = useTodos();
  const modal = useModal();
  
  const isExporting = ref(false);
  const isImporting = ref(false);

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã Date –∏–∑ —Å—Ç—Ä–æ–∫
   * –ü–æ—Å–ª–µ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON –¥–∞—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∞–º–∏
   * @param data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç
   * @returns –î–∞–Ω–Ω—ã–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ Date
  */
  const restoreDates = (data: any): any => {
    if (Array.isArray(data)) {
      return data.map(item => restoreDates(item));
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤
    if (data && typeof data === 'object') {
      const result: any = {};
      for (const [key, value] of Object.entries(data)) {
        if ((key === 'createdAt' || key === 'updatedAt') && typeof value === 'string') {
          result[key] = new Date(value);
        } else {
          result[key] = restoreDates(value);
        }
      }
      return result;
    }
    
    return data;
  };

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
   * @param password - –ü–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
  */
  const exportData = async (password: string): Promise<boolean> => {
    try {
      isExporting.value = true;
      
      // –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const dataToExport: AppData = JSON.parse(JSON.stringify(appData.value));
      console.log('üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', dataToExport);
      
      await ExportImportService.exportData(dataToExport, password);
      return true;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞';
      modal.showError(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${errorMessage}`);
      return false;
    } finally {
      isExporting.value = false;
    }
  };

  /**
   * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   * @param file - –§–∞–π–ª —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   * @param password - –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
  */
  const importData = async (file: File, password: string): Promise<boolean> => {
    try {
      isImporting.value = true;
      console.log('üöÄ –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞...');

      // –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
      const importedData = await ExportImportService.importData(file, password);
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã (—Å—ã—Ä—ã–µ):', importedData);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã
      const dataWithRestoredDates = restoreDates(importedData);
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏:', dataWithRestoredDates);

      replaceData(dataWithRestoredDates);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–º–µ–Ω–µ–Ω—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      
      return true;
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
      
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞';
      
      if (errorMessage.includes('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å') || errorMessage.includes('–ø–∞—Ä–æ–ª—å')) {
        modal.showError('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.');
      } else if (errorMessage.includes('—Å—Ç—Ä—É–∫—Ç—É—Ä') || errorMessage.includes('—Ñ–æ—Ä–º–∞—Ç')) {
        modal.showError('–§–∞–π–ª –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞–Ω –≤ –¥—Ä—É–≥–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
      } else {
        modal.showError(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${errorMessage}`);
      }
      
      return false;
    } finally {
      isImporting.value = false;
    }
  };

  const validatePassword = (password: string): boolean => {
    return EncryptionService.validatePassword(password);
  };

  return {
    isExporting,
    isImporting,
    exportData,
    importData,
    validatePassword
  };
};